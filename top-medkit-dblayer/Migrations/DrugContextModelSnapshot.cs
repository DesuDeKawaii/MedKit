// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using top_medkit_dblayer;

#nullable disable

namespace top_medkit_dblayer.Migrations
{
    [DbContext(typeof(DrugContext))]
    partial class DrugContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClientMedKit", b =>
                {
                    b.Property<Guid>("ClientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedKitsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientsId", "MedKitsId");

                    b.HasIndex("MedKitsId");

                    b.ToTable("ClientMedKit");
                });

            modelBuilder.Entity("top_medkit_models.Models.AcceptanceMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DrugInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DrugInfoId");

                    b.ToTable("AcceptanceMethods");
                });

            modelBuilder.Entity("top_medkit_models.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("top_medkit_models.Models.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcceptanceMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrugInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedKitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AcceptanceMethodId");

                    b.HasIndex("DrugInfoId");

                    b.HasIndex("MedKitId");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("top_medkit_models.Models.DrugInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contraindications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Dosage")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DrugInfos");
                });

            modelBuilder.Entity("top_medkit_models.Models.MedKit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MedKits");
                });

            modelBuilder.Entity("top_medkit_models.Models.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DrugInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DrugInfoId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("top_medkit_models.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("DrugId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ClientMedKit", b =>
                {
                    b.HasOne("top_medkit_models.Models.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("top_medkit_models.Models.MedKit", null)
                        .WithMany()
                        .HasForeignKey("MedKitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("top_medkit_models.Models.AcceptanceMethod", b =>
                {
                    b.HasOne("top_medkit_models.Models.DrugInfo", null)
                        .WithMany("AcceptanceMethod")
                        .HasForeignKey("DrugInfoId");
                });

            modelBuilder.Entity("top_medkit_models.Models.Drug", b =>
                {
                    b.HasOne("top_medkit_models.Models.AcceptanceMethod", "AcceptanceMethod")
                        .WithMany()
                        .HasForeignKey("AcceptanceMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("top_medkit_models.Models.DrugInfo", "DrugInfo")
                        .WithMany("Drugs")
                        .HasForeignKey("DrugInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("top_medkit_models.Models.MedKit", "MedKit")
                        .WithMany("Drugs")
                        .HasForeignKey("MedKitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcceptanceMethod");

                    b.Navigation("DrugInfo");

                    b.Navigation("MedKit");
                });

            modelBuilder.Entity("top_medkit_models.Models.Prescription", b =>
                {
                    b.HasOne("top_medkit_models.Models.Client", "Client")
                        .WithMany("Prescriptions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("top_medkit_models.Models.DrugInfo", "DrugInfo")
                        .WithMany()
                        .HasForeignKey("DrugInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("DrugInfo");
                });

            modelBuilder.Entity("top_medkit_models.Models.Transaction", b =>
                {
                    b.HasOne("top_medkit_models.Models.Client", "Client")
                        .WithMany("Transactions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("top_medkit_models.Models.Drug", "Drug")
                        .WithMany("Transactions")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("top_medkit_models.Models.Client", b =>
                {
                    b.Navigation("Prescriptions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("top_medkit_models.Models.Drug", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("top_medkit_models.Models.DrugInfo", b =>
                {
                    b.Navigation("AcceptanceMethod");

                    b.Navigation("Drugs");
                });

            modelBuilder.Entity("top_medkit_models.Models.MedKit", b =>
                {
                    b.Navigation("Drugs");
                });
#pragma warning restore 612, 618
        }
    }
}
